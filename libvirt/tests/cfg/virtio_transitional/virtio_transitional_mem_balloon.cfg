- virtio_transitional_mem_balloon:
    type = virtio_transitional_mem_balloon
    only q35
    Windows:
        guest_compare_threshold = 300
        driver_name = "balloon"
        # Need plug virtio-win iso to guest in your prepared xml
        # <disk type='file' device='cdrom'>
        #  <driver name='qemu' type='raw'/>
        #  <source file='/var/lib/avocado/data/avocado-vt/isos/windows/virtio-win-latest-prewhql.iso'/>
        #  <backingStore/>
        #  <target dev='sda' bus='sata'/>
        #  <readonly/>
        #  <alias name='sata0-0-0'/>
        #  <address type='drive' controller='0' bus='0' target='0' unit='0'/>
        # </disk>

        # Or if you use avocado to generate xml, define cdrom by:
        # cdroms = "cd1 winutils virtio"
        # cdrom_virtio = isos/windows/virtio-win-latest-signed-el8.iso

        # balloon service related cmd, which should be covered by different
        # guest's paths in guest-os cfg
        install_balloon_service = "%s:\Balloon\2k19\amd64\blnsvr.exe -i"
        uninstall_balloon_service = "%s:\Balloon\2k19\amd64\blnsvr.exe -u"
        status_balloon_service = "%s:\Balloon\2k19\amd64\blnsvr.exe status"
        run_balloon_service = "%s:\Balloon\2k19\amd64\blnsvr.exe -r"
        stop_balloon_service = "%s:\Balloon\2k19\amd64\blnsvr.exe -s"
    start_vm = no
    variants:
        - virtio:
            virtio_model = "virtio"
        - virtio_transitional:
            virtio_model = "virtio-transitional"
        - virtio_non_transitional:
            virtio_model = "virtio-non-transitional"
    variants:
        - @default:
            no virtio_transitional
        - rhel6_guest:
            os_variant = rhel6
            image_path = images/rhel6-x86_64-latest.qcow2
            guest_src_url = "http://download.libvirt.redhat.com/libvirt-CI-resources/RHEL-6.10-x86_64-latest.qcow2"
            only virtio_transitional
    disk_model = ${virtio_model}
